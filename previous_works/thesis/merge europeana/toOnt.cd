namespace owl="http://www.w3.org/2002/07/owl#"
namespace xml="http://www.w3.org/XML/1998/namespace"
namespace xsd="http://www.w3.org/2001/XMLSchema#"
namespace rdfs="http://www.w3.org/2000/01/rdf-schema#"
namespace skos="http://www.w3.org/2004/02/skos/core#"
namespace rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
namespace www="http://www.OntEur#";;

type Thesaurus = <rdf:RDF>[Desc *]
type Desc = <rdf:Description rdf:about=String>[DescAtt *]

type DescAtt = AltLabel | InScheme | PrefLabel | ScopeNote | ExactMatch | Broader | Type
type AltLabel = <skos:altLabel xml:lang=String> String
type InScheme = <skos:inScheme rdf:resource=String> []
type PrefLabel = <skos:prefLabel xml:lang=String> String
type ScopeNote = <skos:scopeNote xml:lang=String> String
type ExactMatch = <skos:exactMatch rdf:resource=String> []
type Broader = <skos:broader rdf:resource=String> []
type Type = <rdf:type rdf:resource=String> [];;



type Ontology = <rdf:RDF xml:base=String> [ Thing * ]
type Thing = Ont | Property | Class | Individual

type Ont = <owl:Ontology rdf:about=String> []

type Property = <owl:ObjectProperty rdf:about=String> [ PropAtt * ]
type PropAtt = Inverse | Domain | Range
type Inverse = <owl:inverseOf rdf:resource=String> []
type Domain = <rdfs:domain rdf:resource=String> [] 
type Range = <rdfs:range rdf:resource=String> []

type Class = <owl:Class rdf:about=String> [ ClassAtt * ]
type ClassAtt = SubClass | EqClass | Label | Note | Dictionary
type SubClass = <rdfs:subClassOf rdf:resource=String> []
type EqClass = <owl:equivalentClass rdf:resource=String> []
type Label = <rdfs:label xml:lang=String> String
type Note = <skos:scopeNote xml:lang=String> String
type Dictionary = <skos:exactMatch rdf:resource=String> []

type Individual = <owl:NamedIndividual rdf:about=String> [ IndAtt * ]
type IndAtt = IndClass | IndProp
type IndClass = <rdf:type rdf:resource=String> []
type IndProp = <_ rdf:resource=String> [];;

let fun thesaurusToOntology (Thesaurus -> Ontology)
	<rdf:RDF>[ (concepts :: Desc) * ] ->
	
	let newClasses = map concepts with <rdf:Description rdf:about=ab> [ (descAttr :: DescAtt)* ] ->
		let classAttr = transform descAttr with
			| x & ScopeNote -> [x]
			| x & ExactMatch -> [x]
			| <skos:prefLabel xml:lang=l> lab -> [<rdfs:label xml:lang=l> lab]
			| <skos:altLabel xml:lang=l> lab  -> [<rdfs:label xml:lang=l> lab]
			| <skos:broader rdf:resource=res> [] -> [<rdfs:subClassOf rdf:resource=res> []]
		in
		<owl:Class rdf:about=ab> classAttr
	in
	<rdf:RDF xml:base="http://www.OntEur"> ( [ <owl:Ontology rdf:about="www.OntEur"> [ ] ] @ newClasses );;

	let thes :? Thesaurus = load_xml("thesaurus.rdf");;

	
	let ont : Ontology = thesaurusToOntology(thes);;
	
	dump_to_file_utf8 "europeana2.rdf" (print_xml_utf8 ont);;
